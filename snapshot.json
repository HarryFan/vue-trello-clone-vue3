{
  "structure": [
    {
      "type": "dir",
      "path": "stores"
    },
    {
      "type": "dir",
      "path": "components"
    },
    {
      "type": "dir",
      "path": "views"
    },
    {
      "type": "dir",
      "path": "assets"
    },
    {
      "type": "dir",
      "path": "services"
    },
    {
      "type": "dir",
      "path": "router"
    },
    {
      "type": "file",
      "path": "App.vue",
      "functions": []
    },
    {
      "type": "file",
      "path": "main.js",
      "functions": []
    },
    {
      "type": "file",
      "path": "style.css"
    },
    {
      "type": "file",
      "path": "stores/board.js",
      "functions": [
        {
          "name": "loadLists",
          "jsdoc": "/**\n * Trello-like 看板資料管理 Pinia Store\n * 完整串接後端 API，確保資料一致性。\n * - CRUD 皆以 API 回傳資料為主\n * - 本地 localStorage 僅做快取\n */\nimport { defineStore } from 'pinia'\nimport {\n  getLists,\n  createList,\n  deleteList as apiDeleteList,\n  getCards,\n  createCard,\n  updateCard,\n  deleteCard as apiDeleteCard\n} from '@/services/apiService'\n\nconst STORAGE_KEY = 'trello_lists_v3'\n\n/**\n * 從 localStorage 讀取 lists 快取\n * @returns {Array|null}\n */",
          "inputs": [],
          "output": null
        },
        {
          "name": "saveLists",
          "jsdoc": "/**\n * Trello-like 看板資料管理 Pinia Store\n * 完整串接後端 API，確保資料一致性。\n * - CRUD 皆以 API 回傳資料為主\n * - 本地 localStorage 僅做快取\n */\nimport { defineStore } from 'pinia'\nimport {\n  getLists,\n  createList,\n  deleteList as apiDeleteList,\n  getCards,\n  createCard,\n  updateCard,\n  deleteCard as apiDeleteCard\n} from '@/services/apiService'\n\nconst STORAGE_KEY = 'trello_lists_v3'\n\n/**\n * 從 localStorage 讀取 lists 快取\n * @returns {Array|null}\n */\nfunction loadLists() {\n  try {\n    const data = localStorage.getItem(STORAGE_KEY)\n    return data ? JSON.parse(data) : null\n  } catch (e) {\n    return null\n  }\n}\n\n/**\n * lists 寫入 localStorage\n * @param {Array} lists\n */",
          "inputs": [],
          "output": null
        }
      ]
    },
    {
      "type": "file",
      "path": "stores/index.js",
      "functions": []
    },
    {
      "type": "file",
      "path": "components/Card.vue",
      "functions": [
        {
          "name": "getHoursLeft",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */",
          "inputs": [],
          "output": null
        },
        {
          "name": "emitEdit",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */",
          "inputs": [],
          "output": null
        },
        {
          "name": "emitDelete",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */",
          "inputs": [],
          "output": null
        },
        {
          "name": "formatCreatedAt",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */\nfunction emitDelete() {\n  emit('delete', props.item)\n}\n/**\n * 將 created_at 格式 \"2025-05-02 11:17:49\" 轉為 \"2025/05/02 11:17\"\n * 支援後端回傳的 SQL DATETIME 格式\n * @param {string} createdAt\n * @returns {string}\n */",
          "inputs": [],
          "output": null
        },
        {
          "name": "formatDeadline",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */\nfunction emitDelete() {\n  emit('delete', props.item)\n}\n/**\n * 將 created_at 格式 \"2025-05-02 11:17:49\" 轉為 \"2025/05/02 11:17\"\n * 支援後端回傳的 SQL DATETIME 格式\n * @param {string} createdAt\n * @returns {string}\n */\nfunction formatCreatedAt(createdAt) {\n  if (!createdAt) return ''\n  // 修正 SQL DATETIME 格式為 JS 標準格式\n  const normalized = createdAt.replace(' ', 'T')\n  const d = new Date(normalized)\n  if (isNaN(d.getTime())) return createdAt // 若解析失敗，直接回傳原字串\n  const yyyy = d.getFullYear()\n  const mm = (d.getMonth() + 1).toString().padStart(2, '0')\n  const dd = d.getDate().toString().padStart(2, '0')\n  const hh = d.getHours().toString().padStart(2, '0')\n  const min = d.getMinutes().toString().padStart(2, '0')\n  return `${yyyy}/${mm}/${dd} ${hh}:${min}`\n}\n\n/**\n * 將 deadline 格式化為 \"YYYY/MM/DD HH:mm\" 格式\n * @param {string} deadline\n * @returns {string}\n */",
          "inputs": [],
          "output": null
        },
        {
          "name": "toggleSubItem",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */\nfunction emitDelete() {\n  emit('delete', props.item)\n}\n/**\n * 將 created_at 格式 \"2025-05-02 11:17:49\" 轉為 \"2025/05/02 11:17\"\n * 支援後端回傳的 SQL DATETIME 格式\n * @param {string} createdAt\n * @returns {string}\n */\nfunction formatCreatedAt(createdAt) {\n  if (!createdAt) return ''\n  // 修正 SQL DATETIME 格式為 JS 標準格式\n  const normalized = createdAt.replace(' ', 'T')\n  const d = new Date(normalized)\n  if (isNaN(d.getTime())) return createdAt // 若解析失敗，直接回傳原字串\n  const yyyy = d.getFullYear()\n  const mm = (d.getMonth() + 1).toString().padStart(2, '0')\n  const dd = d.getDate().toString().padStart(2, '0')\n  const hh = d.getHours().toString().padStart(2, '0')\n  const min = d.getMinutes().toString().padStart(2, '0')\n  return `${yyyy}/${mm}/${dd} ${hh}:${min}`\n}\n\n/**\n * 將 deadline 格式化為 \"YYYY/MM/DD HH:mm\" 格式\n * @param {string} deadline\n * @returns {string}\n */\nfunction formatDeadline(deadline) {\n  if (!deadline) return ''\n  const normalized = deadline.replace(' ', 'T')\n  const d = new Date(normalized)\n  if (isNaN(d.getTime())) return deadline\n  const yyyy = d.getFullYear()\n  const mm = (d.getMonth() + 1).toString().padStart(2, '0')\n  const dd = d.getDate().toString().padStart(2, '0')\n  const hh = d.getHours().toString().padStart(2, '0')\n  const min = d.getMinutes().toString().padStart(2, '0')\n  return `${yyyy}/${mm}/${dd} ${hh}:${min}`\n}\n\n/**\n * 細項勾選切換，發送 update 事件\n * @param {number} idx - 細項索引\n * @fires update\n */",
          "inputs": [],
          "output": null
        }
      ]
    },
    {
      "type": "file",
      "path": "components/UiItemForm.vue",
      "functions": [
        {
          "name": "onSubmit",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "onCancel",
          "jsdoc": "// 送出時帶入所有欄位\n  emit('submit', {\n    ...form,\n    deadline: form.deadline // 確保 deadline 一定帶出\n  })\n  resetForm()\n}",
          "inputs": [],
          "output": null
        },
        {
          "name": "resetForm",
          "jsdoc": "// 送出時帶入所有欄位\n  emit('submit', {\n    ...form,\n    deadline: form.deadline // 確保 deadline 一定帶出\n  })\n  resetForm()\n}\nfunction onCancel() { emit('cancel') }",
          "inputs": [],
          "output": null
        }
      ]
    },
    {
      "type": "file",
      "path": "components/UiModal.vue",
      "functions": [
        {
          "name": "onCancel",
          "jsdoc": "",
          "inputs": [],
          "output": null
        }
      ]
    },
    {
      "type": "file",
      "path": "components/HelloWorld.vue",
      "functions": []
    },
    {
      "type": "file",
      "path": "components/CardDetail.vue",
      "functions": [
        {
          "name": "onCloseClick",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "onConfirmClick",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "saveTitle",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "resetTitle",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "saveDesc",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "resetDesc",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "emitUpdate",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "addSubItem",
          "jsdoc": "",
          "inputs": [],
          "output": null
        }
      ]
    },
    {
      "type": "file",
      "path": "views/BoardView.vue",
      "functions": [
        {
          "name": "addList",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "deleteList",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "onListChange",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）",
          "inputs": [],
          "output": null
        },
        {
          "name": "onCardChange",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）",
          "inputs": [],
          "output": null
        },
        {
          "name": "validateAddCard",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）",
          "inputs": [],
          "output": null
        },
        {
          "name": "submitAddCard",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出",
          "inputs": [],
          "output": null
        },
        {
          "name": "openAddCardDialog",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容",
          "inputs": [],
          "output": null
        },
        {
          "name": "closeAddCardDialog",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗",
          "inputs": [],
          "output": null
        },
        {
          "name": "openEditForm",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單",
          "inputs": [],
          "output": null
        },
        {
          "name": "onFormSubmit",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）",
          "inputs": [],
          "output": null
        },
        {
          "name": "closeForm",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單",
          "inputs": [],
          "output": null
        },
        {
          "name": "deleteItem",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片",
          "inputs": [],
          "output": null
        },
        {
          "name": "updateItem",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容",
          "inputs": [],
          "output": null
        },
        {
          "name": "openDetail",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情",
          "inputs": [],
          "output": null
        },
        {
          "name": "closeDetail",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情\nfunction openDetail(item, list) { detailDialog.item = { ...item }; detailDialog.listTitle = list.title; detailDialog.visible = true }\n// 關閉卡片詳情",
          "inputs": [],
          "output": null
        },
        {
          "name": "onDetailUpdate",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情\nfunction openDetail(item, list) { detailDialog.item = { ...item }; detailDialog.listTitle = list.title; detailDialog.visible = true }\n// 關閉卡片詳情\nfunction closeDetail() { detailDialog.visible = false }\n// 詳情頁直接更新卡片",
          "inputs": [],
          "output": null
        },
        {
          "name": "resetLists",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情\nfunction openDetail(item, list) { detailDialog.item = { ...item }; detailDialog.listTitle = list.title; detailDialog.visible = true }\n// 關閉卡片詳情\nfunction closeDetail() { detailDialog.visible = false }\n// 詳情頁直接更新卡片\nfunction onDetailUpdate(item) { boardStore.updateItemByTitle(detailDialog.listTitle, item) }\n// 重設預設清單",
          "inputs": [],
          "output": null
        }
      ]
    },
    {
      "type": "file",
      "path": "views/HomeView.vue",
      "functions": []
    },
    {
      "type": "file",
      "path": "assets/vue.svg"
    },
    {
      "type": "file",
      "path": "services/apiService.js",
      "functions": [
        {
          "name": "getBoards",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "getBoard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "createBoard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "updateBoard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "deleteBoard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "getLists",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "getList",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "createList",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "updateList",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "deleteList",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "getCards",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "getCard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "createCard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "updateCard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "deleteCard",
          "jsdoc": "",
          "inputs": [],
          "output": null
        },
        {
          "name": "healthCheck",
          "jsdoc": "",
          "inputs": [],
          "output": null
        }
      ]
    },
    {
      "type": "file",
      "path": "router/index.js",
      "functions": []
    }
  ],
  "components": {
    "App.vue": {
      "props": [],
      "emits": [],
      "functions": []
    },
    "main.js": {
      "exports": [],
      "functions": []
    },
    "components/Card.vue": {
      "props": [],
      "emits": [
        "edit",
        "delete",
        "update"
      ],
      "functions": [
        {
          "name": "getHoursLeft",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */"
        },
        {
          "name": "emitEdit",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */"
        },
        {
          "name": "emitDelete",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */"
        },
        {
          "name": "formatCreatedAt",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */\nfunction emitDelete() {\n  emit('delete', props.item)\n}\n/**\n * 將 created_at 格式 \"2025-05-02 11:17:49\" 轉為 \"2025/05/02 11:17\"\n * 支援後端回傳的 SQL DATETIME 格式\n * @param {string} createdAt\n * @returns {string}\n */"
        },
        {
          "name": "formatDeadline",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */\nfunction emitDelete() {\n  emit('delete', props.item)\n}\n/**\n * 將 created_at 格式 \"2025-05-02 11:17:49\" 轉為 \"2025/05/02 11:17\"\n * 支援後端回傳的 SQL DATETIME 格式\n * @param {string} createdAt\n * @returns {string}\n */\nfunction formatCreatedAt(createdAt) {\n  if (!createdAt) return ''\n  // 修正 SQL DATETIME 格式為 JS 標準格式\n  const normalized = createdAt.replace(' ', 'T')\n  const d = new Date(normalized)\n  if (isNaN(d.getTime())) return createdAt // 若解析失敗，直接回傳原字串\n  const yyyy = d.getFullYear()\n  const mm = (d.getMonth() + 1).toString().padStart(2, '0')\n  const dd = d.getDate().toString().padStart(2, '0')\n  const hh = d.getHours().toString().padStart(2, '0')\n  const min = d.getMinutes().toString().padStart(2, '0')\n  return `${yyyy}/${mm}/${dd} ${hh}:${min}`\n}\n\n/**\n * 將 deadline 格式化為 \"YYYY/MM/DD HH:mm\" 格式\n * @param {string} deadline\n * @returns {string}\n */"
        },
        {
          "name": "toggleSubItem",
          "jsdoc": "/**\n * 卡片組件 Card.vue\n * 顯示單一任務卡片內容，包含標題、描述、細項、日期與操作 icon。\n * - 支援「即將到期」與「提醒」icon，並有 CSS3 tooltip。\n * - 支援編輯、刪除、細項切換等互動。\n * @module Card\n * @prop {Object} item - 任務資料物件，必填。包含標題、描述、日期、細項等。\n * @prop {String} listTitle - 所屬清單名稱。\n * @event edit - 點擊編輯 icon 時發出，傳遞 item。\n * @event delete - 點擊刪除 icon 時發出，傳遞 item。\n * @event update - 細項勾選時發出，傳遞更新後的 item。\n */\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport { computed } from 'vue'\nconst emit = defineEmits(['edit', 'delete', 'update'])\nconst props = defineProps({\n  /**\n   * 任務卡片資料物件\n   * @type {Object}\n   */\n  item: {\n    type: Object,\n    required: true\n  },\n  /**\n   * 所屬清單名稱\n   * @type {String}\n   */\n  listTitle: {\n    type: String,\n    required: true\n  }\n})\n\n/**\n * 卡片狀態 class 計算屬性\n * - is-due: 即將到期\n * - is-overdue: 已逾期\n * - completed-card: 已完成\n */\nconst cardClasses = computed(() => ({\n  'is-due': isDue.value,\n  'is-overdue': isOverdue.value,\n  'completed-card': props.listTitle === '完成'\n}))\n\n/**\n * 取得日期 timestamp\n * @returns {number}\n */\nconst timestamp = computed(() => Number(new Date(props.item.deadline)))\n\n/**\n * 是否逾期\n * @returns {boolean}\n */\nconst isOverdue = computed(() => timestamp.value && timestamp.value < Date.now())\n\n/**\n * 是否進入即將到期區間（3天內）\n * @returns {boolean}\n */\nconst isDue = computed(() => {\n  const date = timestamp.value\n  const due = date - (1000 * 60 * 60 * 24) * 3\n  const now = Date.now()\n  return date > now && now > due\n})\n\n/**\n * 計算距離截止日剩餘小時數\n * @returns {number|null}\n */\nfunction getHoursLeft() {\n  if (!props.item.deadline) return null\n  const deadline = new Date(props.item.deadline).getTime()\n  const now = Date.now()\n  const diff = deadline - now\n  if (diff <= 0) return 0\n  return Math.ceil(diff / (1000 * 60 * 60))\n}\n\n/**\n * 發送編輯事件\n * @fires edit\n */\nfunction emitEdit() {\n  emit('edit', props.item)\n}\n/**\n * 發送刪除事件\n * @fires delete\n */\nfunction emitDelete() {\n  emit('delete', props.item)\n}\n/**\n * 將 created_at 格式 \"2025-05-02 11:17:49\" 轉為 \"2025/05/02 11:17\"\n * 支援後端回傳的 SQL DATETIME 格式\n * @param {string} createdAt\n * @returns {string}\n */\nfunction formatCreatedAt(createdAt) {\n  if (!createdAt) return ''\n  // 修正 SQL DATETIME 格式為 JS 標準格式\n  const normalized = createdAt.replace(' ', 'T')\n  const d = new Date(normalized)\n  if (isNaN(d.getTime())) return createdAt // 若解析失敗，直接回傳原字串\n  const yyyy = d.getFullYear()\n  const mm = (d.getMonth() + 1).toString().padStart(2, '0')\n  const dd = d.getDate().toString().padStart(2, '0')\n  const hh = d.getHours().toString().padStart(2, '0')\n  const min = d.getMinutes().toString().padStart(2, '0')\n  return `${yyyy}/${mm}/${dd} ${hh}:${min}`\n}\n\n/**\n * 將 deadline 格式化為 \"YYYY/MM/DD HH:mm\" 格式\n * @param {string} deadline\n * @returns {string}\n */\nfunction formatDeadline(deadline) {\n  if (!deadline) return ''\n  const normalized = deadline.replace(' ', 'T')\n  const d = new Date(normalized)\n  if (isNaN(d.getTime())) return deadline\n  const yyyy = d.getFullYear()\n  const mm = (d.getMonth() + 1).toString().padStart(2, '0')\n  const dd = d.getDate().toString().padStart(2, '0')\n  const hh = d.getHours().toString().padStart(2, '0')\n  const min = d.getMinutes().toString().padStart(2, '0')\n  return `${yyyy}/${mm}/${dd} ${hh}:${min}`\n}\n\n/**\n * 細項勾選切換，發送 update 事件\n * @param {number} idx - 細項索引\n * @fires update\n */"
        }
      ]
    },
    "components/UiItemForm.vue": {
      "props": [
        "modelValue"
      ],
      "emits": [
        "submit",
        "cancel"
      ],
      "functions": [
        {
          "name": "onSubmit",
          "jsdoc": ""
        },
        {
          "name": "onCancel",
          "jsdoc": "// 送出時帶入所有欄位\n  emit('submit', {\n    ...form,\n    deadline: form.deadline // 確保 deadline 一定帶出\n  })\n  resetForm()\n}"
        },
        {
          "name": "resetForm",
          "jsdoc": "// 送出時帶入所有欄位\n  emit('submit', {\n    ...form,\n    deadline: form.deadline // 確保 deadline 一定帶出\n  })\n  resetForm()\n}\nfunction onCancel() { emit('cancel') }"
        }
      ]
    },
    "components/UiModal.vue": {
      "props": [
        "modelValue"
      ],
      "emits": [
        "update:modelValue",
        "cancel"
      ],
      "functions": [
        {
          "name": "onCancel",
          "jsdoc": ""
        }
      ]
    },
    "components/HelloWorld.vue": {
      "props": [
        "msg"
      ],
      "emits": [],
      "functions": []
    },
    "components/CardDetail.vue": {
      "props": [],
      "emits": [
        "close",
        "update"
      ],
      "functions": [
        {
          "name": "onCloseClick",
          "jsdoc": ""
        },
        {
          "name": "onConfirmClick",
          "jsdoc": ""
        },
        {
          "name": "saveTitle",
          "jsdoc": ""
        },
        {
          "name": "resetTitle",
          "jsdoc": ""
        },
        {
          "name": "saveDesc",
          "jsdoc": ""
        },
        {
          "name": "resetDesc",
          "jsdoc": ""
        },
        {
          "name": "emitUpdate",
          "jsdoc": ""
        },
        {
          "name": "addSubItem",
          "jsdoc": ""
        }
      ]
    },
    "views/BoardView.vue": {
      "props": [],
      "emits": [],
      "functions": [
        {
          "name": "addList",
          "jsdoc": ""
        },
        {
          "name": "deleteList",
          "jsdoc": ""
        },
        {
          "name": "onListChange",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）"
        },
        {
          "name": "onCardChange",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）"
        },
        {
          "name": "validateAddCard",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）"
        },
        {
          "name": "submitAddCard",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出"
        },
        {
          "name": "openAddCardDialog",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容"
        },
        {
          "name": "closeAddCardDialog",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗"
        },
        {
          "name": "openEditForm",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單"
        },
        {
          "name": "onFormSubmit",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）"
        },
        {
          "name": "closeForm",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單"
        },
        {
          "name": "deleteItem",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片"
        },
        {
          "name": "updateItem",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容"
        },
        {
          "name": "openDetail",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情"
        },
        {
          "name": "closeDetail",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情\nfunction openDetail(item, list) { detailDialog.item = { ...item }; detailDialog.listTitle = list.title; detailDialog.visible = true }\n// 關閉卡片詳情"
        },
        {
          "name": "onDetailUpdate",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情\nfunction openDetail(item, list) { detailDialog.item = { ...item }; detailDialog.listTitle = list.title; detailDialog.visible = true }\n// 關閉卡片詳情\nfunction closeDetail() { detailDialog.visible = false }\n// 詳情頁直接更新卡片"
        },
        {
          "name": "resetLists",
          "jsdoc": "// ===== 主要邏輯區 =====\n// 1. 狀態與元件註冊\n// 2. 拖曳、表單、彈窗等互動行為\n// 3. 清單/卡片 CRUD 操作\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useBoardStore } from '@/stores/board'\nimport Card from '@/components/Card.vue'\nimport UiItemForm from '@/components/UiItemForm.vue'\nimport UiModal from '@/components/UiModal.vue'\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\nimport Draggable from 'vue3-draggable-next'\n\n// 假設目前僅支援單一預設看板，boardId 寫死為 1\nconst boardId = 1\nconst boardStore = useBoardStore()\n\n// 取得所有清單（reactive，拖曳時自動更新）\nconst lists = computed(() => boardStore.lists)\n// 新增清單的輸入框\nconst newListTitle = ref('')\n// 錯誤訊息顯示\nconst errorMsg = ref('')\n\n// 初始化時自動 fetch lists from API\nonMounted(() => {\n  boardStore.fetchLists(boardId)\n})\n\n/**\n * 新增清單（需傳入 boardId）\n */\nasync function addList() {\n  if (!newListTitle.value.trim()) {\n    errorMsg.value = '請輸入清單名稱'\n    return\n  }\n  errorMsg.value = ''\n  await boardStore.addList(boardId, newListTitle.value.trim())\n  newListTitle.value = ''\n}\n\n/**\n * 刪除清單\n */\nasync function deleteList(listId) {\n  await boardStore.deleteList(listId)\n}\n\n// 處理清單拖移（拖曳清單排序）\nfunction onListChange(evt) {\n  const { moved } = evt\n  if (moved) boardStore.moveList(moved.oldIndex, moved.newIndex)\n}\n\n// 處理卡片拖移（卡片在清單間移動）\nfunction onCardChange(list, evt) {\n  const { added, removed } = evt\n  if (removed && added) {\n    boardStore.moveItemAcrossLists(removed.element.listId, list.id, removed.oldIndex, added.newIndex)\n  }\n}\n\n// 新增卡片彈窗的狀態管理\nconst addCardDialog = reactive({\n  visible: false, // 是否顯示\n  listId: null, // 目標清單 id\n  title: '', // 卡片標題\n  description: '', // 卡片描述\n  date: '', // 卡片日期\n  errors: {} // 表單驗證錯誤\n})\n\n// 驗證新增卡片表單（標題必填、長度限制）\nfunction validateAddCard() {\n  const errors = {}\n  if (!addCardDialog.title) {\n    errors.title = '卡片標題不能為空'\n  } else if (addCardDialog.title.length > 40) {\n    errors.title = '標題長度不能超過 40 字'\n  }\n  addCardDialog.errors = errors\n  return Object.keys(errors).length === 0\n}\n\n// 新增卡片：通過驗證才送出\nfunction submitAddCard() {\n  if (!validateAddCard()) return\n  boardStore.addCard(\n    addCardDialog.listId,\n    {\n      title: addCardDialog.title,\n      description: addCardDialog.description,\n      date: addCardDialog.date\n    }\n  )\n  closeAddCardDialog()\n}\n\n// 開啟新增卡片彈窗，初始化內容\nfunction openAddCardDialog(listId) {\n  addCardDialog.visible = true\n  addCardDialog.listId = listId\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n// 關閉新增卡片彈窗\nfunction closeAddCardDialog() {\n  addCardDialog.visible = false\n  addCardDialog.listId = null\n  addCardDialog.title = ''\n  addCardDialog.description = ''\n  addCardDialog.date = ''\n  addCardDialog.errors = {}\n}\n\n// 編輯卡片表單\nfunction openEditForm(item, list) { formDialog.listId = list.id; formDialog.data = { ...item }; formDialog.edit = true; formDialog.editId = item.id; formDialog.visible = true }\n// 表單送出（新增或編輯卡片）\nfunction onFormSubmit(data) { formDialog.edit && formDialog.editId ? boardStore.updateItem(formDialog.listId, { ...data, id: formDialog.editId }) : boardStore.addCard(formDialog.listId, data); closeForm() }\n// 關閉表單\nfunction closeForm() { formDialog.visible = false; formDialog.data = {}; formDialog.edit = false; formDialog.editId = null }\n// 刪除卡片\nfunction deleteItem(listId, itemId) { boardStore.deleteItem(listId, itemId) }\n// 更新卡片內容\nfunction updateItem(listId, item) { boardStore.updateItem(listId, item) }\n// 開啟卡片詳情\nfunction openDetail(item, list) { detailDialog.item = { ...item }; detailDialog.listTitle = list.title; detailDialog.visible = true }\n// 關閉卡片詳情\nfunction closeDetail() { detailDialog.visible = false }\n// 詳情頁直接更新卡片\nfunction onDetailUpdate(item) { boardStore.updateItemByTitle(detailDialog.listTitle, item) }\n// 重設預設清單"
        }
      ]
    },
    "views/HomeView.vue": {
      "props": [],
      "emits": [],
      "functions": []
    },
    "services/apiService.js": {
      "exports": [
        "getBoards",
        "getBoard",
        "createBoard",
        "updateBoard",
        "deleteBoard",
        "getLists",
        "getList",
        "createList",
        "updateList",
        "deleteList",
        "getCards",
        "getCard",
        "createCard",
        "updateCard",
        "deleteCard",
        "healthCheck"
      ],
      "functions": [
        {
          "name": "getBoards",
          "jsdoc": ""
        },
        {
          "name": "getBoard",
          "jsdoc": ""
        },
        {
          "name": "createBoard",
          "jsdoc": ""
        },
        {
          "name": "updateBoard",
          "jsdoc": ""
        },
        {
          "name": "deleteBoard",
          "jsdoc": ""
        },
        {
          "name": "getLists",
          "jsdoc": ""
        },
        {
          "name": "getList",
          "jsdoc": ""
        },
        {
          "name": "createList",
          "jsdoc": ""
        },
        {
          "name": "updateList",
          "jsdoc": ""
        },
        {
          "name": "deleteList",
          "jsdoc": ""
        },
        {
          "name": "getCards",
          "jsdoc": ""
        },
        {
          "name": "getCard",
          "jsdoc": ""
        },
        {
          "name": "createCard",
          "jsdoc": ""
        },
        {
          "name": "updateCard",
          "jsdoc": ""
        },
        {
          "name": "deleteCard",
          "jsdoc": ""
        },
        {
          "name": "healthCheck",
          "jsdoc": ""
        }
      ]
    }
  },
  "stores": {
    "stores/board.js": {
      "state": [],
      "actions": []
    },
    "stores/index.js": {
      "state": [],
      "actions": [
        "setUser"
      ]
    }
  },
  "router": {
    "router/index.js": {
      "routes": [
        "/",
        "/welcome"
      ]
    }
  }
}